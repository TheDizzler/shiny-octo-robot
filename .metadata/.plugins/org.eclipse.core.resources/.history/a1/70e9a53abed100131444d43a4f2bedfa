package vdindustries.masterflow.content;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import android.content.res.AssetManager;



public class DeficiencyParser {
	
	public static InputStream	projectXML;
	public static Element		root;
	public static NodeList		listFloorNodes;
	
	public static NodeList		listTrades;
	private AssetManager		assMan;
	
	
	public DeficiencyParser(AssetManager am) {
	
		assMan = am;
		try {
			projectXML = assMan.open("testproject.xml");
			
			Document xmlDoc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(
				projectXML);
			root = xmlDoc.getDocumentElement();
			
			listFloorNodes = root.getElementsByTagName("floor");
			listTrades = root.getElementsByTagName("trade");
//			for (int i = 0; i < listFloorNodes.getLength(); ++i) {
//				
//				listRoomNodes.add(listFloorNodes.item(i).getChildNodes());
//			}
			
		} catch (SAXException | IOException | ParserConfigurationException e) {
			e.printStackTrace();
		}
	}
	
	
//	public static Deficiency parse() {
//	
//		Deficiency def = null;
//		
//		try {
//			def = new Deficiency();
//			Document xmlDoc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(
//					projectXML);
//			Element root = xmlDoc.getDocumentElement();
//			// gets all child elements 
//			NodeList listDefNodes = root.getElementsByTagName(Deficiency.ELEMENT);
//			
//			
//		} catch (ParserConfigurationException e) {
//			def = null;
//		} catch (SAXException e) {
//			def = null;
//		} catch (IOException e) {
//			def = null;
//		}
//		
//		return def;
//	}
	
	/** Builds a list of deficiencies by trade. */
	public static List<Deficiency> getByTradeList(String tradeSelected) {
	
		List<Deficiency> defList = new ArrayList<Deficiency>();
		
		// for each <trade> element
		for (int i = 0; i < listTrades.getLength(); ++i) {
			
			// if <trade type = tradeSelected>
			if (((Element) listTrades.item(i)).getAttribute("type").equalsIgnoreCase(tradeSelected)) {
				
				// get a list of all child deficiency elements
				NodeList nodes = ((Element) listTrades.item(i)).getElementsByTagName("deficiency");
				
				for (int j = 0; j < nodes.getLength(); ++j)
					
					defList.add(parseDeficiency(nodes.item(j)));
			}
		}
		
		return defList;
	}
	
	
	private static Deficiency parseDeficiency(Node node) {
	
		Deficiency def = new Deficiency();
		Element elem = (Element) node;
		
		def.reportID = elem.getAttribute(Deficiency.ID);
		
		Node n = elem.getFirstChild(); // completed
		n = n.getNextSibling(); // priority
		n = n.getNextSibling(); // coordinates

		
		def.X = Integer.parseInt(n.getAttribute(Deficiency.XCOORD));
		def.Y = Integer.parseInt(n.getAttribute(Deficiency.YCOORD));
		
//		def.object = elemCurrent.getTextContent();
//		elemCurrent = (Element) elemCurrent.getNextSibling();
//		def.item = elemCurrent.getTextContent();
//		elemCurrent = (Element) elemCurrent.getNextSibling();
//		def.verb = elemCurrent.getTextContent();
//		elemCurrent = (Element) elemCurrent.getNextSibling();
//		def.direction = elemCurrent.getTextContent();
//		elemCurrent = (Element) elemCurrent.getNextSibling();
//		def.location = elemCurrent.getTextContent();
		
		
		def.priority = Boolean.parseBoolean(elem.getAttribute(Deficiency.PRIORITY));
		def.completed = Boolean.parseBoolean(elem.getAttribute(Deficiency.COMPLETED));
		
		return def;
	}
}
