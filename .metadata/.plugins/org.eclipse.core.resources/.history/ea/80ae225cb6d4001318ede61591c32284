package vdindustries.content;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import android.content.res.AssetManager;



public class DeficiencyParser {
	
	public static InputStream	projectXML;
	public static Element		root;
	public static NodeList		listFloorNodes;
	
	public static NodeList		listTrades;
	private AssetManager		assMan;
	
	
	public DeficiencyParser(AssetManager am) {
	
		assMan = am;
		try {
			projectXML = assMan.open("testproject.xml");
			
			Document xmlDoc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(
				projectXML);
			root = xmlDoc.getDocumentElement();
			root.normalize();
			listFloorNodes = root.getElementsByTagName("floor");
			listTrades = root.getElementsByTagName("trade");
			
		} catch (SAXException | IOException | ParserConfigurationException e) {
			e.printStackTrace();
		}
	}
	
	
	
	public static int totalDefByUnit(String unit) {
		
		
		return 4;
	}
	
	
	public static int outstandingDefByUnit(String unit) {
		
		
		return 5;
	}
	
	
	public static Deficiency getDefByID(String reportID) {
		
		
		return null;
	}
	
	
	
	/** Builds a list of deficiencies by trade. */
	public static List<Deficiency> getDefByTradeList(String tradeSelected) {
	
		List<Deficiency> defList = new ArrayList<Deficiency>();
		
		// for each <trade> element
		for (int i = 0; i < listTrades.getLength(); ++i) {
			
			// if <trade type = tradeSelected>
			if (((Element) listTrades.item(i)).getAttribute("type").equalsIgnoreCase(tradeSelected)) {
				
				// get a list of all child deficiency elements
				NodeList nodes = ((Element) listTrades.item(i)).getElementsByTagName("deficiency");
				
				for (int j = 0; j < nodes.getLength(); ++j)
					defList.add(parseDeficiency(nodes.item(j)));
			}
		}
		
		return defList;
	}
	
	
	private static Deficiency parseDeficiency(Node node) {
	
		Deficiency def = new Deficiency();
		Element defElem = (Element) node;
		
		def.reportID = defElem.getAttribute(Deficiency.REPORTID);
		
		def.completed =  Boolean.parseBoolean(defElem.getElementsByTagName(Deficiency.COMPLETED).item(0).getTextContent());
		def.priority  =  Boolean.parseBoolean(defElem.getElementsByTagName(Deficiency.PRIORITY).item(0).getTextContent());
		Element coor = ((Element)defElem.getElementsByTagName("coordinates").item(0));
		def.X = Integer.parseInt(coor.getAttribute(Deficiency.XCOORD));
		def.Y = Integer.parseInt(coor.getAttribute(Deficiency.YCOORD));
		
		def.object = defElem.getElementsByTagName(Deficiency.OBJECT).item(0).getTextContent();
		def.item = defElem.getElementsByTagName(Deficiency.ITEM).item(0).getTextContent();
		def.verb = defElem.getElementsByTagName(Deficiency.VERB).item(0).getTextContent();
		def.direction = defElem.getElementsByTagName(Deficiency.DIRECTION).item(0).getTextContent();
		def.location = defElem.getElementsByTagName(Deficiency.LOCATION).item(0).getTextContent();
		
		def.trade = ((Element) defElem.getParentNode()).getAttribute(Deficiency.TRADE);
		def.roomNo = ((Element) defElem.getParentNode().getParentNode()).getAttribute(Deficiency.ROOMNO);
		return def;
	}
	
	/** Gets element string value from XML file and converts it to an int */
	private int parseIntFromString(Element eElement, String XMLTag) {
	
		String stringInit = eElement.getElementsByTagName(XMLTag).item(0).getTextContent();
		int init = java.lang.Integer.parseInt(stringInit);
		
		return init;
		
	}


	public static String getFloorImageByAttribute(String floorID) {
	
		
		for(int i = 0; i < listFloorNodes.getLength(); ++i) {
			if (((Element)listFloorNodes.item(i)).getAttribute(Deficiency.FLOORID).equals(floorID)) {
				
//				return ((Element)listFloorNodes.item(i)).
			}
		}
		
		return null;
	}
}
